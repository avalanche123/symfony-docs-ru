.. index::
   single: Тесты; Профилирование

Как использовать профилировщик в Функциональном тесте
=====================================================

Весьма рекомендуется чтобы функциональный тест тестировал только объект Response.
Но если вы пишите функциональные тесты которые проверяют ваши production серверы,
то возможно у вас появится желание написать тесты которые используют данные 
профилировщика, т.к. данные которые он предоставляет позволяют проверить 
множество параметры и обеспечить соблюдение определенных показателей.

Профилировщик в Symfony2 собирает множество данных по каждому запросу.Информацию
можно использовать для замера количества запросов к БД, время затраченное
фреймворком и т.д. Но прежде, чем писать проверочные выражения (assertions), 
всегда следует проверять доступность профилировщика в текущем окружении 
(по-умолчанию к нему есть доступ в ``test`` окружении)::

    class HelloControllerTest extends WebTestCase
    {
        public function testIndex()
        {
            $client = $this->createClient();
            $crawler = $client->request('GET', '/hello/Fabien');

            // Записываем некоторые логические выражения которые относятся 
            // к объекту  Response и которые необходимо проверить
            // ...

            // Проверяем доступен ли профайлер
            if ($profiler = $client->getProfiler()) {
                // подсчитаем количество запросов к БД
                $this->assertTrue($profiler->get('db')->getQueryCount() < 10);

                // проверяем время затраченное фреймворком
                $this->assertTrue( $profiler->get('timer')->getTime() < 0.5);
            }
        }
    }

Если тест провалится из-за результатов полученных от профилировщика (например будет 
наблюдаться большое количество запросов к БД), то вполне возможно, у вас появится 
желание использовать Веб Профилировщик с целью анализа запросов. после завершения тестов. 
Легким способ это сделать - встроить метку в сообщение об ошибке::

    $this->assertTrue(
        $profiler->get('db')->getQueryCount() < 30,
        sprintf('Проверяем, что количество запросов менее 30 (token %s)', $profiler->getToken())
    );

.. caution::
     Хранилищем данных для профилировщика может различаться в зависимости от 
     среды в которой он работает (особенно если используется хранилище SQLite, которое 
     является одним из сконфигурированных по-умолчанию).

.. note::
    Информация профилировщика доступна даже в тех случаях, когда клиент отделен,
    либо вами используется HTTP уровень в тестах.    

.. tip::
    Рекомендуем почитать про API встроенных :doc:`сборщиков данных</cookbook/profiler/data_collector>`
    чтобы узнать больше об их интерфейсах.
