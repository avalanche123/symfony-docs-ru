.. index::
    single: Кеширование; Varnish

Как использовать Varnish для ускорения работы сайта
===================================================

Так как кеш Symfony2 использует стандартные HTTP-заголовки кеша, :ref:`symfony-gateway-cache`
может быть легко заменен любым другим reverse proxy. Varnish - это мощный HTTP-акселератор
с открыытми исходными кодами, который позволяет быстро отдавать закешированный контент
и позволяет использовать :ref:`Edge Side Includes<edge-side-includes>`.

.. index::
    single: Varnish; настройка

Настройка
---------

Как мы видели раньше, Symfony2 может определить, используется ли reverse proxy, который
понимает ESI, или нет. Это работает «из коробки», когда вы пользуетесь reverse proxy в Symfony2, но
для работы с Varnish нужна специальная настройка. Благодаря стандарту, разработанному Akamaï
(`Edge Architecture`_), советы из этой главы могут быть полезны даже если вы не используете Symfony2.

.. note::

    Varnish поддерживает только атрибут ``src`` для тегов ESI (атрибуты ``onerror`` и ``alt`` игнорируются).

Для начала настройте Varnish таким образом, чтобы он оповещал о поддержке ESI
через заголовок ``Surrogate-Capability`` тех запросов, которые перенаправляются backend-приложению:

.. code-block:: text

    sub vcl_recv {
        set req.http.Surrogate-Capability = "abc=ESI/1.0";
    }

Затем, оптимизируйте Varnish таким образом, чтобы он парсил содержимое ответа,
когда в нем присутствует хотя бы один тег ESI. Этого можно добиться, проверив наличие ответа
``Surrogate-Control``, который добавляется автоматически Symfony2:

.. code-block:: text

    sub vcl_fetch {
        if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
            unset beresp.http.Surrogate-Control;
            esi;
        }
    }

.. caution::

    Не используйте сжатие с ESI, так как Varnish не сможет пропарсить
    содержимое ответа. Если вы хотите использовать сжатие, установите веб-сервер
    перед Varnish, который бы организовывал сжатие ответа.

.. index::
    single: Varnish; Аннулирование

Аннулирование кеша
------------------

По идее, вам никогда не потребуется аннулирование кеша, потому что это уже учитывается в HTTP
(см. :ref:`http-cache-invalidation`).

Однако, Varnish может быть настроен так, чтобы мог принимать специальный метод HTTP - ``PURGE`` - 
который может аннулировать кеш для входящих запросов:

.. code-block:: text

    sub vcl_hit {
        if (req.request == "PURGE") {
            set obj.ttl = 0s;
            error 200 "Purged";
        }
    }

    sub vcl_miss {
        if (req.request == "PURGE") {
            error 404 "Not purged";
        }
    }

.. caution::

    Мы должны ограничить доступ к HTTP-методу ``PURGE``, чтобы избежать его использование
    другими людьми;
