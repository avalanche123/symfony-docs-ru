:orphan:

Словарь терминов
================

.. glossary::
   :sorted:

   Дистрибутив
        *Дистрибутив* (Distribution) это сборка компонентов Symfony2, набор бандлов,
        структура директорий проекта, конфигурация по умолчанию и
        опциональные настройки.

   Проект
        *Проект* (Project) - это директория некоторого Приложения, набор бандлов,
        сторонних библиотек, автозагрузчик и фронт-контроллер.

   Приложение
        *Приложение* (Application) - это директория, содержащая *конфигурацию* для
        данного набора Бандлов.

   Бандл
        *Бандл* (Bundle), это директория, содержащая набор файлов
        (PHP-файлы, стили, яваскрипты, изображения), который *реализует*
        единичную фичу (блог, форум и т.д.). В Symfony2, *как правило*,
        всё распложено в бандлах (см. :ref:`page-creation-bundles`).

   Фронт Контроллер
        *Фронт Контроллер* (Front Controller) - это короткий PHP-скрипт, который располагается
        в web-директории вашего проекта. Как правило, *все* запросы обрабатываются
        этим фронт-контроллером, чьей работой является загрузка приложения
        Symfony.

   Контроллер
        *Контроллер* (Controller) - это PHP функция, которая содержит всю логику, необходимую
        для возврата объекта ``Response``, который представляет собой некоторую
        страницу. Как правило, маршрут связан с контроллером, который затем
        использует информацию из запроса для обработки данных, выполнения некоторых
        экшнов и, в конечном счёте, возврате объекта ``Response``.

   Сервис
        *Сервис* (Service) - это обобщённое наименование любого PHP
        объекта, который выполняет некую, специфичную только для него, задачу.
        Сервис, как правило, используется "глобально", например, объект подключения
        к базе данных, или же объект для отправки email сообщений. В Symfony2
        сервисы часто конфигурируются и получаются посредством сервис контейнера.
        О приложении, которое имеет много отдельных сервисов, говорят, что оно реализует
        сервис-ориентированную архитектуру (см. `Сервис-ориентированная архитектура`_).

   Сервис Контейнер
        *Сервис Контейнер* (Service Container), также известен как *Контейнер
        внедрения зависимости* (Dependency Injection Container), это особый объект,
        который управляет созданием экземпляров сервисов в приложении. Вместо того,
        чтобы создавать сервисы напрямую, разработчик *обучает* сервис контейнер
        (при помощи конфигурации) как создавать сервисы. Сервис контейнер позаботится
        о создании и внедрении зависимых сервисов. См. главу :doc:`/book/service_container`.

   Спецификация протокола HTTP
        *Спецификация протокола HTTP* - это набор правил, определяющий классическую
        схему клиент-серверного взаимодействия при помощи запросов и ответов.
        Эта спецификация определяет формат, используемый для запросов и ответов,
        а также возможные HTTP заголовки, которые они могут иметь. Дополнительную
        информацию вы можете поучить на страницах `Http Wikipedia`_ или же
        непосредственно из спецификации `HTTP 1.1 RFC`_.

   Окружение
        *Окружение* (Environment) это строка (например, ``prod`` или ``dev``), которая
        соответствует некоторой конфигурации приложения. Одно и то же приложение
        может быть выполнено на одной и той же машине с использованием различных
        конфигураций при помощи окружений. Это очень удобно, так как позволяет
        приложению иметь ``dev`` окружение, которое предназначено для отладки, и
        ``prod`` окружение, которое оптимизировано для получения наибольшей
        скорости.

   Вендор
        *Вендор* (Vendor) - это поставщик PHP библиотек и бандлов, включая сам
        Symfony2. Не смотря на типичный смысл этого слова в мире коммерции,
        вендоры в Symfony часто (даже в основном) включают в себя бесплатное
        программное обеспечение. Любая библиотека, которую вы добавите в ваш
        Symfony2 проект, должна находиться в директории ``vendor``. См.
        :ref:`Архитектура: использование вендоров <using-vendors>`.

   Acme
        *Acme* - это наименование несуществующей компании, используемое в
        демонстрациях и документации Symfony. Оно используется в качестве пространства
        имён, где вы, как правило, будете использовать наименование вашей компании
        (например, ``Acme\BlogBundle``).

   Экшн
        *Экшн* (Action) - это PHP-функция или метод, которые выполняются,
        например, при обнаружении соответствия URI с некоторым маршрутом.
        Термин Экшн по сути является синонимом термина *Контроллер*,
        за исключением того, что контроллер может также ссылаться на
        PHP класс, который может включать в себя несколько экшнов.
        См. главу :doc:`Контроллер </book/controller>`.

   Ассет
        *Ассет* (Asset) - это любой не исполнимый статический компонент веб-приложения,
        такой как CSS, JavaScript, изображение или видео. Ассет может быть размещён
        непосредственно в директории ``web`` или же опубликован из Бандла (см. :term:`Бандл`)
        в веб-директорию при помощи консольной команды ``assets:install``.

   Ядро
        *Ядро* (Kernel) - это сердце Symfony2. Объект ядра обрабатывает HTTP запросы
        с использованием всех бандлов и библиотек в нём зарегистрированных. См.
        :ref:`Архитектура: Директория приложения <the-app-dir>` и
        главу :doc:`/book/internals`.

   Фаервол
        В Symfony2 *Фаервол* (Firewall) не имеет отношения к сетевым технологиям.
        Вместо этого он определяет механизм аутентификации (т.е. он занимается процессом
        определения личности ваших пользователей) для всего приложения целиком,
        либо лишь для некоторой его части. См. главу :doc:`/book/security`.

   YAML
        *YAML* - это рекурсивный акроним для строки "YAML Ain't a Markup Language"
        (YAML не является языком разметки). Это простой, легко читаемый язык
        сериализации данных, широко применяемый в конфигурационных файлах Symfony2.
        См. главу :doc:`/reference/YAML`.

.. _`Сервис-ориентированная архитектура`: http://ru.wikipedia.org/wiki/Сервис-ориентированная_архитектура
.. _`HTTP Wikipedia`: http://ru.wikipedia.org/wiki/HTTP
.. _`HTTP 1.1 RFC`: http://www.w3.org/Protocols/rfc2616/rfc2616.html

.. toctree::
    :hidden:

    Translation source: 2011-10-11 df9104b
    Corrected from:
